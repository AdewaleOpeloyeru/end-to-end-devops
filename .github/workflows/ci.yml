name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '.github/workflows/create_infra.yml'
      - '.github/workflows/destroy_infra.yml'
      - 'infra/**'
      - 'README.md'
      - .gitignore
      - 'LICENSE'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '.github/workflows/create_infra.yml'
      - '.github/workflows/destroy_infra.yml'
      - 'infra/**'
      - 'README.md'
      - .gitignore
      - 'LICENSE'
  workflow_dispatch:

permissions:
  security-events: write

jobs:
  # build-and-test:
  #   name: Continous Integration
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout code
  #       uses: actions/checkout@v3

  #     - name: fetch tokens
  #       id: doppler
  #       uses: dopplerhq/secrets-fetch-action@558a97f7f29b80c369cc89e9ecb697c7941dba87
  #       with:
  #         doppler-token: ${{ secrets.DOPPLER_TOKEN }}

  #     - name: setup java and maven
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'
  #         cache: 'maven'

  #     - name: run tests
  #       run: mvn clean test

  #     - name: build and scan with sonarqube
  #       env:
  #         SONAR_TOKEN: ${{ steps.doppler.outputs.SONARQUBE_TOKEN }}
  #       run: |
  #        mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
  #        -Dsonar.java.jdkHome=${{ env.JAVA_HOME }} \
  #        -Dsonar.host.url=https://sonarcloud.io \
  #        -Dsonar.organization=adewaleopeloyeru \
  #        -Dsonar.projectKey=AdewaleOpeloyeru_end-to-end-devops

  #     - name: setup node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: install snyk cli
  #       run: npm install -g snyk

  #     - name: snyk scan
  #       env:
  #         SNYK_TOKEN: ${{ steps.doppler.outputs.SNYK_TOKEN }}
  #       run: snyk test --all-projects --severity-threshold=high

  #     - name: initialize codeql
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: java
  #         build-mode: autobuild

  #     - name: perform codeql analysis
  #       uses: github/codeql-action/analyze@v3

  #     - name: test build docker image
  #       run: docker build -t sample-docker-image .

  # containerize-and-deliver:
  #   name: Continuous Delivery
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: checkout code
  #       uses: actions/checkout@v3

  #     - name: fetch tokens
  #       id: doppler
  #       uses: dopplerhq/secrets-fetch-action@558a97f7f29b80c369cc89e9ecb697c7941dba87
  #       with:
  #         doppler-token: ${{ secrets.DOPPLER_TOKEN }}
      
  #     - name: setup java
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'
  #         cache: 'maven'
      
  #     - name: build with maven
  #       run: mvn clean package -DskipTests

  #     - name: build docker image
  #       run: docker build -t sample-docker-image .

  #     - name: tag and push to cloudsmith
  #       env:
  #         USERNAME: adewale-opeloyeru
  #         PASSWORD: ${{ steps.doppler.outputs.CLOUDSMITH_TOKEN }}
  #       run: |
  #         echo ${{ env.PASSWORD }} | docker login -u ${{ env.USERNAME }} --password-stdin  docker.cloudsmith.io
  #         docker tag sample-docker-image:latest docker.cloudsmith.io/adewale-opeloyeru-s6dz/sample-docker-repo/sample-docker-image:latest
  #         docker push docker.cloudsmith.io/adewale-opeloyeru-s6dz/sample-docker-repo/sample-docker-image:latest

  deploy:
    name: Continuous Deployment
    runs-on: ubuntu-latest
#    needs: containerize-and-deliver
#    if: github.ref == 'refs/heads/main'
    steps:
      - name: fetch tokens
        id: doppler
        uses: dopplerhq/secrets-fetch-action@558a97f7f29b80c369cc89e9ecb697c7941dba87
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}

      - name: install ibmcloud cli
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh

      - name: verify ibmcloud cli
        run: ibmcloud --version

      - name: ibmcloud login
        env:
          API_KEY: ${{ steps.doppler.outputs.IBMCLOUD_API_KEY }}
        run: |
          ibmcloud login --apikey ${{ env.API_KEY }} -r eu-gb
          ibmcloud target -g Default
      
      - name: install ibmcloud code engine plugin
        run: ibmcloud plugin install code-engine -f

      - name: verify code engine plugin
        run: ibmcloud ce

      - name: select code engine project
        run: ibmcloud ce project select --name end_to_end_devops        

      - name: create registry secret
        env:
          USERNAME: adewale-opeloyeru
          PASSWORD: ${{ steps.doppler.outputs.CLOUDSMITH_TOKEN }}
        run: |
          if ibmcloud ce secret get --name my-secret; then
            ibmcloud ce secret delete --name my-secret -f
          fi
           ibmcloud ce secret create --name my-secret --format registry \
           --server docker.cloudsmith.io --username "$USERNAME" --password $PASSWORD 

      # - name: deploy application to code engine
      #   run: |
      #     ibmcloud ce application create --name sample-deployed-app \
      #     --image docker.cloudsmith.io/adewale-opeloyeru-s6dz/sample-docker-repo/sample-docker-image:latest \
      #     --registry-secret my-secret --cpu 0.5 --memory 1G --max-scale 1 --min-scale 1 
